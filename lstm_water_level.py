# -*- coding: utf-8 -*-
"""Salinan dari Salinan dari LSTM Water level.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c4nCXZDp_bEzIrWDWzOxjirUK9TD0Ws_
"""

# Commented out IPython magic to ensure Python compatibility.
# Import libraries
import numpy as np
import pandas as pd
import calendar
import seaborn as sns
sns.set(color_codes=True)
import matplotlib.pyplot as plt
# %matplotlib inline

from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_percentage_error
from sklearn.metrics import mean_absolute_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.random import set_seed
plt.style.use("fivethirtyeight")

from keras.models import Sequential
from keras.layers import Dense, LSTM

from google.colab import drive
drive.mount('/content/drive')

"""#  Data acquisition"""

# Read Dataset Master
xlsx_link = 'https://docs.google.com/spreadsheets/d/1gpbh31AdGBAEhoPGCLEOg8u-veUCxcqA/export'
data = pd.read_excel(xlsx_link)
data.info

# filtering dataset
data.set_index('Time', inplace=True) # indexing the 'Time' column
data = data[data['Water level'] != 0] # Drop the Value NaN/0
data["Water level"] = [float(str(i).replace(",", "")) for i in data["Water level"]] # Filtering the dataset Water level value/change to float

# Dataset info
data.info()

# PLot the timeseries dataset in Year
ts = data['Water level']

df_plot = ts.groupby([ts.index.month,ts.index.year]).sum().unstack()
df_plot

fig, ax = plt.subplots(figsize=(18,8))
df_plot.plot(ax=ax,legend=False)

# xticks
months = [calendar.month_abbr[i] for i in range(1,13)]
ax.set_xticks(range(12))
ax.set_xticklabels(months)

# plot names in the end
for col in df_plot.columns:
    plt.annotate(col,xy=(plt.xticks()[0][-1]+0.7, df_plot[col].iloc[-1]))
    
plt.savefig('Time Series by Year.jpg', dpi=300, bbox_inches='tight')

"""# Data exploration"""

df = data.copy()
df.reset_index(inplace=True)
df['year'] = df['Time'].dt.to_period('Y') # Make new column Year from dataset master
df

df.info()

df= df[df['Water level'] != 0]

df1=df.loc[:,['Time','Water level']]
df1.set_index('Time',inplace=True)
df1.plot(figsize=(18,8))
plt.ylabel('Water Level')
plt.legend().set_visible(False)
plt.tight_layout()
plt.title('Water Level Time Series')
sns.despine(top=True)
plt.savefig('Water level time seris.jpg', dpi=300, bbox_inches='tight')
plt.show();

df2 = df.copy()
df2.plot.scatter(x='Time', y='Water level', figsize=(18,8))
plt.ylabel('Water Level')
plt.legend().set_visible(False)
plt.tight_layout()
plt.title('Water Level Time Series')
sns.despine(top=True)
plt.savefig('Water Level Scatter plot.jpg', dpi=300, bbox_inches='tight')
plt.show();

import plotly.express as px

fig = px.scatter(df, x='Time', y="Water level") #show detail Water level all time with plotly express
fig.show()

"""# Modeling """

# Create a new dataframe with only the Water Level column 
data = df2.filter(['Water level'])
# Convert the dataframe to a numpy array
dataset = data.values
# Get the number of rows to train the model on
training_data_len = int(np.ceil( len(dataset) * .95 ))

training_data_len

# Scale the data
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)

scaled_data

# Create the training data set 
# Create the scaled training data set
train_data = scaled_data[0:int(training_data_len), :]
# Split the data into x_train and y_train data sets
x_train = []
y_train = []

for i in range(60, len(train_data)):
    x_train.append(train_data[i-60:i, 0])
    y_train.append(train_data[i, 0])
    if i<= 61:
        print(x_train)
        print(y_train)
        print()
        
# Convert the x_train and y_train to numpy arrays 
x_train, y_train = np.array(x_train), np.array(y_train)

# Reshape the data
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
# x_train.shape

# Build the LSTM model
model = Sequential()
model.add(LSTM(128, return_sequences=True, input_shape= (x_train.shape[1], 1)))
model.add(LSTM(64, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(x_train, y_train, batch_size=1, epochs=10)

"""# Model Evaluation"""

# Create the testing data set
# Create a new array containing scaled values
test_data = scaled_data[training_data_len - 60: , :]
# Create the data sets x_test and y_test
x_test = []
y_test = dataset[training_data_len:, :]
for i in range(60, len(test_data)):
    x_test.append(test_data[i-60:i, 0])
    
# Convert the data to a numpy array
x_test = np.array(x_test)

# Reshape the data
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1 ))

# Get the models predicted values 
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

# Get the root mean squared error (RMSE)
rmse = np.sqrt(np.mean(((predictions - y_test) ** 2)))
rmse

print(mean_absolute_error(y_test, predictions)) # Mean absolute error

np.mean(np.abs((y_test - predictions)/y_test))*100 # Mean absolute percentage error

# Plot the data
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions
# Visualize the data
plt.figure(figsize=(18,8))
plt.title('Model')
plt.xlabel('Time'), #fontsize=18)
plt.ylabel('Water Level'), #fontsize=18)
plt.plot(train['Water level'])
plt.plot(valid[['Water level', 'Predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc='upper right')
plt.savefig('Model LSTM Water level.jpg', dpi=300, bbox_inches='tight')
plt.show()

# Show the valid and predicted prices
valid

model.save("/content/drive/MyDrive/Dataset/Proyek Akhir/model.h5")